{"id":"projects/projects.html","dependencies":[{"name":"/Users/stacyleitstein/SEI/sandbox/myprofile/package.json","includedInParent":true,"mtime":1620170968697}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n\n\n        <title>3js</title>\n    </head>\n\n    <body>\n        <a href=\"https://stacy125.github.io/pokemon/\"><button>Pokemon</button></a>\n        <a href=\"https://stacy125.github.io/dog-info/\"><button>Breed Info</button></a>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r79/three.min.js\"></script>\n        <script>function _readOnlyError(name) { throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\"); }\n\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, .1, 1000);\nvar renderer = new THREE.WebGLRenderer();\ncamera.position.x = 40;\ncamera.position.y = 40;\ncamera.position.z = 40;\nrenderer.setClearColor(0xdd00dd);\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMapSoft = true; //GEOMETRY\n\nvar cubeGeo = new THREE.BoxGeometry(5, 5, 5);\nvar cubeMat = new THREE.MeshLambertMaterial({\n  color: 0x0000ff\n});\nvar cube = new THREE.Mesh(cubeGeo, cubeMat);\ncube.castShadow = true;\ncube.position.y = 2.5;\nvar planeGeo = new THREE.PlaneGeometry(100, 100, 100);\nvar planeMat = new THREE.MeshLambertMaterial(0xffffff);\nvar plane = new THREE.Mesh(planeGeo, planeMat);\nplane.rotation.x = -.5 * Math.PI;\nplane.receiveShadow = true;\nvar spotlight = new THREE.SpotLight(0xfffff);\nspotlight.castShadow = true;\nspotlight.position.set(30, 60, 60);\nscene.add(plane);\nscene.add(spotlight); // scene.add(cube)\n\ncamera.lookAt(scene.position);\ndocument.body.appendChild(renderer.domElement);\nvar increment = 0;\n\nvar render = function render() {\n  increment + 0.01, _readOnlyError(\"increment\");\n  requestAnimationFrame(render);\n  cube.position.y += Math.sin(increment) * 0.05;\n  cube.rotation.y += 0.01;\n  spinCamera();\n  renderer.render(scene, camera);\n};\n\nloadFont();\nrender();\n/*\nHELPERS\n~~~~~~~~~~~~~~~~~~~*/\n//SETTINGS\n\nvar text = \"aems\",\n    height = 2,\n    size = 10,\n    curveSegments = 10,\n    bevelThickness = 1,\n    bevelSize = 0.3,\n    bevelSegments = 3,\n    bevelEnabled = true,\n    font = undefined;\nvar rotation = 0;\n\nfunction spinCamera() {\n  rotation + 0.003, _readOnlyError(\"rotation\");\n  camera.position.z = Math.sin(rotation) * 80;\n  camera.position.x = Math.cos(rotation) * 80;\n  camera.lookAt(scene.position);\n}\n\nfunction loadFont() {\n  var loader = new THREE.FontLoader();\n  loader.load('helvetiker_regular.typeface.js', function (res) {\n    res, _readOnlyError(\"font\");\n    createText();\n  });\n}\n\nfunction createText() {\n  textGeo = new THREE.TextGeometry('My Projects', {\n    font: font,\n    size: size,\n    height: height,\n    curveSegments: curveSegments,\n    weight: \"normal\",\n    bevelThickness: bevelThickness,\n    bevelSize: bevelSize,\n    bevelSegments: bevelSegments,\n    bevelEnabled: bevelEnabled\n  });\n  textGeo.computeBoundingBox();\n  textGeo.computeVertexNormals();\n  var text = new THREE.Mesh(textGeo, cubeMat);\n  text.position.x = -textGeo.boundingBox.max.x / 2;\n  text.position.y = textGeo.boundingBox.max.y;\n  text.castShadow = true;\n  scene.add(text);\n}</script>\n    </body>\n\n</html>\n"},"sourceMaps":null,"error":null,"hash":"e0e5fd04fdbbaabc11188aa21d0b5d41","cacheData":{"env":{}}}