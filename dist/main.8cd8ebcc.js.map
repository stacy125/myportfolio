{"version":3,"sources":["main.js"],"names":["console","log","dat","raycaster","THREE","Raycaster","scene","Scene","camera","PerspectiveCamera","innerWidth","innerHeight","renderer","WebGLRenderer","generatePlane","planeMesh","geometry","dispose","PlaneGeometry","world","plane","width","height","widthSegments","heightSegments","array","attributes","position","randomValues","i","length","x","y","z","Math","random","push","PI","originalPosition","colors","count","setAttribute","BufferAttribute","Float32Array","setSize","setPixelRatio","devicePixelRatio","gui","GUI","add","onChange","document","body","appendChild","domElement","controls","OrbitControls","planeGeometry","planeMaterial","MeshPhongMaterial","side","DoubleSide","flatShading","FlatShading","vertexColors","Mesh","light","DirectionalLight","set","backlight","mouse","undefined","frame","animate","requestAnimationFrame","render","setFromCamera","cos","sin","needsUpdate","intersects","intersectObject","color","object","setX","face","a","setY","b","setZ","c","initialColor","r","g","hoverColor","gsap","to","duration","onUpdate","addEventListener","event","clientX","clientY"],"mappings":"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","file":"main.8cd8ebcc.js","sourceRoot":"..","sourcesContent":["\n\nconsole.log('hello');\nconsole.log(dat);\n\nconst raycaster = new THREE.Raycaster()\nconst scene = new THREE.Scene()\nconst camera = new THREE.PerspectiveCamera(\n    75,\n    innerWidth / innerHeight,\n    0.1,\n    1000\n)\nconst renderer = new THREE.WebGLRenderer()\n\n\nrenderer.setSize(innerWidth, innerHeight)\nrenderer.setPixelRatio(devicePixelRatio)\n\nfunction generatePlane() {\n    planeMesh.geometry.dispose()\n    planeMesh.geometry = new THREE.PlaneGeometry(\n        world.plane.width,\n        world.plane.height,\n        world.plane.widthSegments,\n        world.plane.heightSegments\n    )\n\n    // vertices position randomization\n    const { array } = planeMesh.geometry.attributes.position\n    const randomValues = []\n    for (let i = 0; i < array.length; i++) {\n        if (i % 3 === 0) {\n            const x = array[i]\n            const y = array[i + 1]\n            const z = array[i + 2]\n\n            array[i] = x + (Math.random() - 0.5) * 3\n            array[i + 1] = y + (Math.random() - 0.5) * 3\n            array[i + 2] = z + Math.random() * 3\n        }\n        randomValues.push(Math.random() * Math.PI * 2)\n    }\n\n    planeMesh.geometry.attributes.position.randomValues = randomValues\n    planeMesh.geometry.attributes.position.originalPosition =\n        planeMesh.geometry.attributes.position.array\n\n    // color attribute addition\n    const colors = []\n    for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\n        colors.push(0, 0.19, 0.4)\n    }\n\n    planeMesh.geometry.setAttribute('color',\n        new THREE.BufferAttribute(new Float32Array(colors), 3)\n    )\n}\n\nconst gui = new dat.GUI()\nconst world = {\n    plane: {\n        width: 400,\n        height: 400,\n        widthSegments: 50,\n        heightSegments: 50\n    }\n}\n\ngui.add(world.plane, 'width', 1, 500).onChange(generatePlane)\ngui.add(world.plane, 'height', 1, 500).onChange(generatePlane)\ngui.add(world.plane, 'widthSegments', 1, 100).onChange(generatePlane)\ngui.add(world.plane, 'heightSegments', 1, 100).onChange(generatePlane)\n\ndocument.body.appendChild(renderer.domElement)\n\nconst controls = new OrbitControls(camera, renderer.domElement)\n// const boxGeometry = new THREE.BoxGeometry(1, 1, 1)\n// const material = new THREE.MeshBasicMaterial({color: 0x00FF00})\n// const mesh = new THREE.Mesh(boxGeometry, material)\n// scene.add(mesh)\n\ncamera.position.z = 50\n\nconst planeGeometry = new THREE.PlaneGeometry(\n    world.plane.width,\n    world.plane.height,\n    world.plane.widthSegments,\n    world.plane.heightSegments)\n\nconst planeMaterial = new THREE.MeshPhongMaterial({\n    // color: 0xff0000,\n    side: THREE.DoubleSide,\n    flatShading: THREE.FlatShading,\n    vertexColors: true\n})\nconst planeMesh = new THREE.Mesh(planeGeometry, planeMaterial)\nscene.add(planeMesh)\ngeneratePlane()\n\n\nconst light = new THREE.DirectionalLight(0xffffff, 1)\nlight.position.set(0, -1, 1)\nscene.add(light)\n\nconst backlight = new THREE.DirectionalLight(0xffffff, 1)\nbacklight.position.set(0, 0, -1)\nscene.add(backlight)\n\nconst mouse = {\n    x: undefined,\n    y: undefined\n}\n\nlet frame = 0\nfunction animate() {\n    requestAnimationFrame(animate)\n    renderer.render(scene, camera)\n    raycaster.setFromCamera(mouse, camera)\n    frame += 0.01\n\n    const {\n        array,\n        originalPosition,\n        randomValues\n    } = planeMesh.geometry.attributes.position\n    for (let i = 0; i < array.length; i += 3) {\n        // x\n        array[i] = originalPosition[i] +\n            Math.cos(frame + randomValues[i]) * 0.01\n\n        // y\n        array[i + 1] = originalPosition[i + 1] +\n            Math.sin(frame + randomValues[i + 1]) * 0.001\n    }\n\n    planeMesh.geometry.attributes.position.needsUpdate = true\n\n    const intersects = raycaster.intersectObject(planeMesh)\n    if (intersects.length > 0) {\n        const { color } = intersects[0].object.geometry.attributes\n\n        // vertices 1\n        color.setX(intersects[0].face.a, 0.1)\n        color.setY(intersects[0].face.b, 0.5)\n        color.setZ(intersects[0].face.b, 1)\n\n        // vertices 2\n        color.setX(intersects[0].face.c, 0.1)\n        color.setY(intersects[0].face.c, 0.5)\n        color.setZ(intersects[0].face.c, 1)\n\n        // vertices 3\n        color.setX(intersects[0].face.c, 0.1)\n        color.setY(intersects[0].face.c, 0.5)\n        color.setZ(intersects[0].face.c, 1)\n\n        color.needsUpdate = true\n        // changes back to original color\n        const initialColor = {\n            r: 0,\n            g: 0.19,\n            b: 0.4\n        }\n\n        const hoverColor = {\n            r: 0.1,\n            g: 0.5,\n            b: 1\n        }\n        gsap.to(hoverColor, {\n            r: initialColor.r,\n            g: initialColor.g,\n            b: initialColor.b,\n            duration: 1,\n            onUpdate: () => {\n                // vertices 1\n                color.setX(intersects[0].face.a, hoverColor.r)\n                color.setY(intersects[0].face.a, hoverColor.g)\n                color.setZ(intersects[0].face.a, hoverColor.b)\n\n                // vertices 2\n                color.setX(intersects[0].face.b, hoverColor.r)\n                color.setY(intersects[0].face.b, hoverColor.g)\n                color.setZ(intersects[0].face.b, hoverColor.b)\n\n                // vertices 3\n                color.setX(intersects[0].face.c, hoverColor.r)\n                color.setY(intersects[0].face.c, hoverColor.g)\n                color.setZ(intersects[0].face.c, hoverColor.b)\n                color.needsUpdate = true\n\n            }\n        })\n    }\n    // mesh.rotation.x += 0.01\n    // mesh.rotation.y += 0.01\n    // planeMesh.rotation.x += 0.01\n\n}\n\nrenderer.render(scene, camera)\n\nanimate()\naddEventListener('mousemove', (event) => {\n    mouse.x = (event.clientX / innerWidth) * 2 - 1\n    mouse.y = -(event.clientY / innerHeight) * 2 + 1\n})\n"]}